@echo off
setlocal enabledelayedexpansion

echo ========================================
echo AI Code Agent - Production Build Script
echo With API Configuration
echo ========================================

set "SCRIPT_DIR=%~dp0"
set "BACKEND_DIR=%SCRIPT_DIR%backend"
set "FRONTEND_DIR=%SCRIPT_DIR%frontend"
set "BUILD_SUCCESS=true"

REM Default API URL for production (can be overridden)
if "%API_BASE_URL%"=="" set "API_BASE_URL=/api"

echo.
echo Configuration:
echo   API_BASE_URL: %API_BASE_URL%
echo   Frontend Dir: %FRONTEND_DIR%
echo   Backend Dir:  %BACKEND_DIR%

echo.
echo [1/6] Preparing Environment Configuration...
echo ----------------------------------------

REM Create production environment file
echo Creating production environment configuration...
(
    echo # Production environment variables - Generated by build script
    echo VITE_API_BASE_URL=%API_BASE_URL%
) > "%FRONTEND_DIR%\.env.production.local"

echo ✓ Environment configuration created

echo.
echo [2/6] Installing Frontend Dependencies...
echo ----------------------------------------
cd /d "%FRONTEND_DIR%"

if not exist "node_modules" (
    echo Installing frontend dependencies...
    call npm install
    if errorlevel 1 (
        echo ERROR: Failed to install frontend dependencies
        set "BUILD_SUCCESS=false"
        goto :end
    )
    echo ✓ Dependencies installed
) else (
    echo ✓ Dependencies already installed
)

echo.
echo [3/6] Building Frontend for Production...
echo ----------------------------------------
echo Building with API_BASE_URL: %API_BASE_URL%

call npm run build
if errorlevel 1 (
    echo ERROR: Frontend build failed
    set "BUILD_SUCCESS=false"
    goto :end
)

echo ✓ Frontend production build completed

echo.
echo [4/6] Building Backend Docker Image...
echo ----------------------------------------
cd /d "%BACKEND_DIR%"

echo Checking Docker availability...
docker --version >nul 2>&1
if errorlevel 1 (
    echo WARNING: Docker is not available. Skipping backend build.
    echo To build backend later, run: docker build -t ai-code-agent-backend:latest backend/
    goto :skip_docker
)

echo Building Docker image: ai-code-agent-backend:latest
docker build -t ai-code-agent-backend:latest .
if errorlevel 1 (
    echo ERROR: Backend Docker build failed
    set "BUILD_SUCCESS=false"
    goto :end
)

echo ✓ Backend Docker image built successfully
goto :continue_build

:skip_docker
echo ✓ Backend build skipped (Docker not available)

:continue_build
echo.
echo [5/6] Validating Build Artifacts...
echo ----------------------------------------
cd /d "%SCRIPT_DIR%"

if not exist "%FRONTEND_DIR%\dist\index.html" (
    echo ERROR: Frontend dist/index.html not found
    set "BUILD_SUCCESS=false"
    goto :end
)

echo ✓ Frontend build artifacts validated

REM Check if Docker image exists (only if Docker is available)
docker --version >nul 2>&1
if not errorlevel 1 (
    docker images ai-code-agent-backend:latest --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" | findstr ai-code-agent-backend >nul
    if errorlevel 1 (
        echo WARNING: Backend Docker image not found
    ) else (
        echo ✓ Backend Docker image validated
    )
)

echo.
echo [6/6] Creating Deployment Configuration...
echo ----------------------------------------

REM Create production environment template if it doesn't exist
if not exist ".env.prod.example" (
    echo Creating production environment template...
    (
        echo # AI Code Agent - Production Environment Configuration
        echo # Copy this file to .env and update the values for your deployment
        echo.
        echo # Database Configuration
        echo POSTGRES_USER=prod_user
        echo POSTGRES_PASSWORD=change-this-secure-password
        echo POSTGRES_PORT=5432
        echo POSTGRES_DB=ai_code_agent
        echo.
        echo # Application Configuration
        echo BACKEND_PORT=8080
        echo FRONTEND_PORT=80
        echo JWT_SECRET=change-this-super-secret-jwt-key-for-production
        echo.
        echo # API Configuration
        echo API_BASE_URL=%API_BASE_URL%
        echo.
        echo # Optional: Custom domain configuration
        echo # DOMAIN=your-domain.com
        echo # SSL_CERT_PATH=/path/to/cert.pem
        echo # SSL_KEY_PATH=/path/to/key.pem
    ) > .env.prod.example
    echo ✓ Production environment template created
) else (
    echo ✓ Production environment template already exists
)

REM Create nginx configuration with API proxy
echo Creating nginx configuration...
(
    echo server {
    echo     listen 80;
    echo     server_name localhost;
    echo     root /usr/share/nginx/html;
    echo     index index.html;
    echo.
    echo     # Enable gzip compression
    echo     gzip on;
    echo     gzip_vary on;
    echo     gzip_min_length 1024;
    echo     gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    echo.
    echo     # Handle client routing, return index.html for all routes
    echo     location / {
    echo         try_files $uri $uri/ /index.html;
    echo     }
    echo.
    echo     # API proxy to backend
    echo     location /api/ {
    echo         proxy_pass http://backend:8080/api/;
    echo         proxy_set_header Host $host;
    echo         proxy_set_header X-Real-IP $remote_addr;
    echo         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    echo         proxy_set_header X-Forwarded-Proto $scheme;
    echo         proxy_connect_timeout 30s;
    echo         proxy_send_timeout 30s;
    echo         proxy_read_timeout 30s;
    echo     }
    echo.
    echo     # Static assets with long cache
    echo     location ~* \.(js^|css^|png^|jpg^|jpeg^|gif^|ico^|svg^|woff^|woff2^|ttf^|eot^)$ {
    echo         expires 1y;
    echo         add_header Cache-Control "public, immutable";
    echo     }
    echo.
    echo     # Security headers
    echo     add_header X-Frame-Options "SAMEORIGIN" always;
    echo     add_header X-Content-Type-Options "nosniff" always;
    echo     add_header X-XSS-Protection "1; mode=block" always;
    echo }
) > nginx.prod.conf

echo ✓ Nginx configuration created

echo.
echo ========================================
echo Production Build Summary
echo ========================================

if "%BUILD_SUCCESS%"=="true" (
    echo ✓ Production build completed successfully!
    echo.
    echo Configuration:
    echo   API Base URL: %API_BASE_URL%
    echo.
    echo Built artifacts:
    echo   - Frontend: %FRONTEND_DIR%\dist\
    echo   - Backend Docker image: ai-code-agent-backend:latest
    echo   - Production compose: docker-compose.prod.yml
    echo   - Nginx config: nginx.prod.conf
    echo   - Environment template: .env.prod.example
    echo.
    echo To deploy in production:
    echo   1. Copy .env.prod.example to .env and configure your settings
    echo   2. Run: docker-compose -f docker-compose.prod.yml up -d
    echo.
    echo To customize API URL for different environments:
    echo   set API_BASE_URL=https://your-api-domain.com/api ^&^& build-prod-api.bat
    echo.
    echo To stop: docker-compose -f docker-compose.prod.yml down
) else (
    echo ✗ Production build failed! Check the error messages above.
    exit /b 1
)

:end
cd /d "%SCRIPT_DIR%"
echo.
echo Production build script completed.
endlocal