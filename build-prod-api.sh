#!/bin/bash

echo "========================================"
echo "AI Code Agent - Production Build Script"
echo "With API Configuration"
echo "========================================"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_DIR="$SCRIPT_DIR/backend"
FRONTEND_DIR="$SCRIPT_DIR/frontend"
BUILD_SUCCESS=true

# Default API URL for production (can be overridden)
API_BASE_URL="${API_BASE_URL:-/api}"

echo
echo "Configuration:"
echo "  API_BASE_URL: $API_BASE_URL"
echo "  Frontend Dir: $FRONTEND_DIR"
echo "  Backend Dir:  $BACKEND_DIR"

echo
echo "[1/6] Preparing Environment Configuration..."
echo "----------------------------------------"

# Create production environment file
echo "Creating production environment configuration..."
cat > "$FRONTEND_DIR/.env.production.local" << EOF
# Production environment variables - Generated by build script
VITE_API_BASE_URL=$API_BASE_URL
EOF

echo "✓ Environment configuration created"

echo
echo "[2/6] Installing Frontend Dependencies..."
echo "----------------------------------------"
cd "$FRONTEND_DIR"

if [ ! -d "node_modules" ]; then
    echo "Installing frontend dependencies..."
    npm install
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to install frontend dependencies"
        BUILD_SUCCESS=false
        exit 1
    fi
    echo "✓ Dependencies installed"
else
    echo "✓ Dependencies already installed"
fi

echo
echo "[3/6] Building Frontend for Production..."
echo "----------------------------------------"
echo "Building with API_BASE_URL: $API_BASE_URL"

npm run build
if [ $? -ne 0 ]; then
    echo "ERROR: Frontend build failed"
    BUILD_SUCCESS=false
    exit 1
fi

echo "✓ Frontend production build completed"

echo
echo "[4/6] Building Backend Docker Image..."
echo "----------------------------------------"
cd "$BACKEND_DIR"

echo "Checking Docker availability..."
if ! command -v docker &> /dev/null; then
    echo "WARNING: Docker is not available. Skipping backend build."
    echo "To build backend later, run: docker build -t ai-code-agent-backend:latest backend/"
    SKIP_DOCKER=true
else
    echo "Building Docker image: ai-code-agent-backend:latest"
    docker build -t ai-code-agent-backend:latest .
    if [ $? -ne 0 ]; then
        echo "ERROR: Backend Docker build failed"
        BUILD_SUCCESS=false
        exit 1
    fi
    echo "✓ Backend Docker image built successfully"
    SKIP_DOCKER=false
fi

echo
echo "[5/6] Validating Build Artifacts..."
echo "----------------------------------------"
cd "$SCRIPT_DIR"

if [ ! -f "$FRONTEND_DIR/dist/index.html" ]; then
    echo "ERROR: Frontend dist/index.html not found"
    BUILD_SUCCESS=false
    exit 1
fi

echo "✓ Frontend build artifacts validated"

# Check if Docker image exists (only if Docker is available)
if [ "$SKIP_DOCKER" = false ]; then
    if docker images ai-code-agent-backend:latest --format "table {{.Repository}}:{{.Tag}}" | grep -q ai-code-agent-backend; then
        echo "✓ Backend Docker image validated"
    else
        echo "WARNING: Backend Docker image not found"
    fi
fi

echo
echo "[6/6] Creating Deployment Configuration..."
echo "----------------------------------------"

# Create production environment template if it doesn't exist
if [ ! -f ".env.prod.example" ]; then
    echo "Creating production environment template..."
    cat > .env.prod.example << EOF
# AI Code Agent - Production Environment Configuration
# Copy this file to .env and update the values for your deployment

# Database Configuration
POSTGRES_USER=prod_user
POSTGRES_PASSWORD=change-this-secure-password
POSTGRES_PORT=5432
POSTGRES_DB=ai_code_agent

# Application Configuration
BACKEND_PORT=8080
FRONTEND_PORT=80
JWT_SECRET=change-this-super-secret-jwt-key-for-production

# API Configuration
API_BASE_URL=$API_BASE_URL

# Optional: Custom domain configuration
# DOMAIN=your-domain.com
# SSL_CERT_PATH=/path/to/cert.pem
# SSL_KEY_PATH=/path/to/key.pem
EOF
    echo "✓ Production environment template created"
else
    echo "✓ Production environment template already exists"
fi

# Create nginx configuration with API proxy
echo "Creating nginx configuration..."
cat > nginx.prod.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Handle client routing, return index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy to backend
    location /api/ {
        proxy_pass http://backend:8080/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Static assets with long cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
}
EOF

echo "✓ Nginx configuration created"

echo
echo "========================================"
echo "Production Build Summary"
echo "========================================"

if [ "$BUILD_SUCCESS" = true ]; then
    echo "✓ Production build completed successfully!"
    echo
    echo "Configuration:"
    echo "  API Base URL: $API_BASE_URL"
    echo
    echo "Built artifacts:"
    echo "  - Frontend: $FRONTEND_DIR/dist/"
    echo "  - Backend Docker image: ai-code-agent-backend:latest"
    echo "  - Production compose: docker-compose.prod.yml"
    echo "  - Nginx config: nginx.prod.conf"
    echo "  - Environment template: .env.prod.example"
    echo
    echo "To deploy in production:"
    echo "  1. Copy .env.prod.example to .env and configure your settings"
    echo "  2. Run: docker-compose -f docker-compose.prod.yml up -d"
    echo
    echo "To customize API URL for different environments:"
    echo "  API_BASE_URL=https://your-api-domain.com/api ./build-prod-api.sh"
    echo
    echo "To stop: docker-compose -f docker-compose.prod.yml down"
else
    echo "✗ Production build failed! Check the error messages above."
    exit 1
fi

cd "$SCRIPT_DIR"
echo
echo "Production build script completed."